On the back-end side, we initially decided to use Node.js as our database to store various inputs such as events, calendars, and users. We also used the Google Calendar API in order to import calendars and events from Google Calendar into our node.js database. We decided to use Node.js since we could use JavaScript on both the front and back end which made our application very compatible. Node.js is also asynchronous which means it is very good for writing high performance applications.

We initially used EJS (Embedded JavaScript) to populate the calendar, event, and login forms. EJS was very suited for our purposes since it allows you to insert dynamically generate HTML.

After the first couple weeks, we realized that we werenâ€™t getting the results we wanted, and not every function we wanted was working smoothly. We then noticed that a similar implementation was already done in Ruby on Rails. Since most of the underlying structure between this new Rails backend and our original Node backend was very similar, we were able to quickly switch. Now we use Rails to handle our events database, and ERB to generate HTML templates, which is the Ruby version of EJS.

We also decided to implement the user login through their Google accounts since most people have a Gmail account nowadays, and many also use Google calendars for calendar services. It made more sense for the user, and also made implementation simpler on the backend.

On the front-end side, we used JQuery, as well as additional JQuery plugins such as FullCalendar and qTip. FullCalendar is a calendar JQuery plugin that gives us a very basic framework and view for displaying events. We used this library as a base, and built upon it with extra features such as adding events and displaying data in the calendar by pulling data from the database. qTip is another JQuery plugin that gives us a couple nifty features. It allows the user to display the event time and name simply by hovering over an event with their mouse.

